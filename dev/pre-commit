#!/bin/bash

HS_FILES=$(git diff --name-only --diff-filter=ACMR HEAD "*.hs")

if ! which ormolu >& /dev/null; then
  echo "Could not find 'ormolu', is it installed?"
  exit 1
fi

BAD_HS_FILES=""

for file in $HS_FILES; do
  if ! ormolu -m check -o '-XTypeApplications' -o '-fplugin=RecordDotPreprocessor' "${file}"; then
    BAD_HS_FILES+=" ${file}"
    FAIL="true"
  fi
done

if [ -n "$FAIL" ]; then
  ORMOLU_CMD="ormolu -m inplace -o -fplugin=RecordDotPreprocessor ${BAD_HS_FILES}"

  echo "Code style issues found in:"
  echo "${BAD_HS_FILES}"

  if [ -n "$ATLAS_DISABLE_AUTOFORMAT" ]; then
    echo "Fix them with:"
    echo " ${ORMOLU_CMD}"
  else
    echo "Running Ormolu, please check and git add the changes"
    ${ORMOLU_CMD}
  fi
fi

mac_os_rm_trailing_ws () {
  BACKUP_EXTENSION=pqmc98hxvymotiyb4rz34
  sed -i".${BACKUP_EXTENSION}" -e 's/  *$//' $1
  find ./ -name "*.${BACKUP_EXTENSION}" -exec rm {} +
}

ALL_CHANGED_FILES=$(git diff --name-only --diff-filter=ACMR HEAD)
[ -n "$ALL_CHANGED_FILES" ] && FILES_WITH_TRAILING_WS=$(grep -r -l '  *$' $ALL_CHANGED_FILES)

if [ -n "$FILES_WITH_TRAILING_WS" ]; then
  echo "Trailing spaces found in:"
  echo "$FILES_WITH_TRAILING_WS"

  if [ -n "$ATLAS_DISABLE_AUTOFORMAT" ]; then
    echo "Fix them with:"
    echo "sed -e 's/  *$//' ${FILES_WITH_TRAILING_WS}"
  else
    echo "Removing trailing spaces, please check and git add the changes"
    [[ $OSTYPE == 'darwin'* ]] \
      && mac_os_rm_trailing_ws "${FILES_WITH_TRAILING_WS}" \
      || sed -i -e 's/  *$//' ${FILES_WITH_TRAILING_WS}
  fi
  FAIL="true"
fi

for MODULE in $(ls dev/migrations); do
  MIGRATION_DIR="dev/migrations/${MODULE}"
  if [ $(ls ${MIGRATION_DIR} | cut -c-4 | uniq | wc -l) != $(ls ${MIGRATION_DIR} | wc -l) ]; then
    echo "There are overlapping migration indices in ${MODULE}"
    FAIL="true"
  fi
done

DHALL_FILES=$(git diff --name-only --diff-filter=ACMR HEAD "*.dhall")

if ! which dhall >& /dev/null; then
  echo "Could not find 'dhall', is it installed?"
  exit 1
fi

for file in $DHALL_FILES; do
  if ! dhall --file "${file}" 1>/dev/null; then
    BAD_DHALL_FILES+=" ${file}"
    DHALL_FAIL="true"
  fi
done

if [ -n "$DHALL_FAIL" ]; then
  echo "Invalid dhall files:"
  echo "${BAD_DHALL_FILES}"
  FAIL="true"
fi

if [ -n "$FAIL" ]; then
  exit 1
else
  exit 0
fi
